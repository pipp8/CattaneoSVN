/* ** *** ***** ******* *********** *************
 * DIA - Dipartimento di Informatica ed Applicazioni "Renato M. Capocelli" 				
 * http://www.dia.unisa.it			
 * 
 ************* *********** ******* ***** *** ** */

package crymes.server.gui;

import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

import crymes.book.Address;
import crymes.book.CMessage;
import crymes.book.MessageType;
import crymes.server.Engine;




@SuppressWarnings("serial")
public class SmsPanel extends javax.swing.JPanel implements java.awt.event.ActionListener {
    
	private final String DATE_TABLE_COLUMN = "Date";
	private final String CLIENT_TABLE_COLUMN = "Client";
	private final String DIRECTION_TABLE_COLUMN = "Direction";
	private final String TYPE_TABLE_COLUMN = "Type";
	private final String LENGTH_TABLE_COLUMN = "Length";
	private final String DATA_TABLE_COLUMN = "Data";
	
	private final int DATE_TABLE_COLUMN_POS = 0;
	private final int CLIENT_TABLE_COLUMN_POS = 1;
	private final int DIRECTION_TABLE_COLUMN_POS = 2;
	private final int TYPE_TABLE_COLUMN_POS = 3;
	private final int LENGTH_TABLE_COLUMN_POS = 4;
	private final int DATA_TABLE_COLUMN_POS = 5;

	private final int COLUMNS = 6;
	private Engine _engine;
	private Vector<Address> _addresses = null;
	
    /** Creates new form smsPanel */
    public SmsPanel(Engine e) {
    	_engine = e;
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new JTable();
        recipientList = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(700, 400));
        
        String [] header = new String[COLUMNS];
        header[DATE_TABLE_COLUMN_POS] = DATE_TABLE_COLUMN;
        header[CLIENT_TABLE_COLUMN_POS] = CLIENT_TABLE_COLUMN;
        header[DIRECTION_TABLE_COLUMN_POS] = DIRECTION_TABLE_COLUMN;
        header[TYPE_TABLE_COLUMN_POS] = TYPE_TABLE_COLUMN;
        header[LENGTH_TABLE_COLUMN_POS] = LENGTH_TABLE_COLUMN;
        header[DATA_TABLE_COLUMN_POS] = DATA_TABLE_COLUMN;
        
      
        
        MyTableModel model = new MyTableModel( header , 0);
        
        jTable1.setModel(model);
        jTable1.setAutoscrolls(true);
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        TableColumn col = jTable1.getColumnModel().getColumn(DATE_TABLE_COLUMN_POS);
        col.setPreferredWidth(170);
        col = jTable1.getColumnModel().getColumn(CLIENT_TABLE_COLUMN_POS);
        col.setPreferredWidth(80);
        col = jTable1.getColumnModel().getColumn(DIRECTION_TABLE_COLUMN_POS);
        col.setPreferredWidth(50);
        col = jTable1.getColumnModel().getColumn(TYPE_TABLE_COLUMN_POS);
        col.setPreferredWidth(175);
        col = jTable1.getColumnModel().getColumn(LENGTH_TABLE_COLUMN_POS);
        col.setPreferredWidth(40);
        col = jTable1.getColumnModel().getColumn(DATA_TABLE_COLUMN_POS);
        col.setPreferredWidth(133);
        
        
        
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }

			

			
        });            
        
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setViewportView(jTable1);
        
        

        
        recipientList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));

        jLabel1.setText("Recipient");

        textArea.setColumns(20);
        textArea.setRows(3);
        textArea.setLineWrap(true);
        
        jScrollPane2.setViewportView(textArea);

        sendButton.setText("Send");
        sendButton.addActionListener(this);

        jLabel2.setText("Text");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel1)
                            .add(jLabel2))
                        .add(19, 19, 19)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 322, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(14, 14, 14)
                                .add(sendButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(recipientList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 165, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(recipientList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(sendButton))
                .add(17, 17, 17)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addContainerGap())
        );
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == sendButton) {
            SmsPanel.this.sendButtonAction(evt);
        }
    }//GEN-END:initComponents

    private void sendButtonAction(java.awt.event.ActionEvent evt) {
    	// Si dovrebbe fare un modello per la combobox che mantenga l'address
    	// e visualizzi nella combo solo il nome con l'indirizzo. 
    	// Poi si deve prendere l'address e da questo recuperare url, attraverso
    	// l'il selectedItem
    	String str = (String)recipientList.getSelectedItem();
    	
    	String []strs = str.split("\\x28");
    	strs = strs[1].split("\\x29");

    	String text = textArea.getText();
    	_engine.sendAMessage(strs[0], text);
    	textArea.setText("");
    	
    	MainFrame.restartTimer();
    	
    	
    }
    
    private void jTable1MouseClicked(MouseEvent evt) {
    	MainFrame.restartTimer();
		
	}
    
    @SuppressWarnings("unchecked")
	public void updateRecipientList(){
    	//recipientList = new JComboBox(a);
    	_addresses = _engine.buildListAddressesEnabled();
    	DefaultComboBoxModel b = (DefaultComboBoxModel)recipientList.getModel();
    	
    	b.removeAllElements();
    	String str;
    	boolean enableSend = false;
    	for (Iterator iterator = _addresses.iterator(); iterator.hasNext();) {
			Address name = (Address) iterator.next();
			str = name.getPerson().getName() + " ("+name.getUrl()+")";
			b.addElement(str);
			enableSend = true;
		}
    	
    	sendButton.setEnabled(enableSend);
    	
    	
    	//recipientList.setm
    	//recipientList.setVisible(true);
    }
    
    public void addRowToMessageList(CMessage m){

    	SimpleDateFormat sdf = new SimpleDateFormat("d MMM yyyy HH:mm:ss Z");
    	
    	Object  [] s =  new Object[COLUMNS];
    	s[DATE_TABLE_COLUMN_POS] = sdf.format(m.getTime());
    	s[CLIENT_TABLE_COLUMN_POS] = m.getSender();
    	
    	// 0 se server->client, 1 se client->server
    	int direction = -1;
    	String type;
    	switch (m.getType()) {
		case MessageType.PK_REGISTER_REQUEST:
			direction = 1;
			type = "Registrazione PK";
			break;
		case MessageType.PK_SERVER_CHALLENGE:
			direction = 0;
			type = "Invio Verifica PK";
			break;
		case MessageType.PK_CHALLENGE_RESPONSE:
			direction = 1;
			type = "Response Verifica PK";
			break;
		case MessageType.ENCRYPTED_TEXT_INBOX:
			direction = 0;
			type = "Encrypted Text";
			break;
		
		default:
			direction = -1;
			type = "Not defined";
			break;
		}
    	
    	//Image i= null;
    	String dStr = "???";
    	if (direction == 0){
    		//i=Toolkit.getDefaultToolkit().getImage("res/global/icons/srvcli.jpg");
    		dStr = "S >>> C";
    	} else if (direction == 1) {
    		dStr = "S <<< C";
    		//i=Toolkit.getDefaultToolkit().getImage("res/global/icons/clisrv.jpg");
    	} else {
    		//i=Toolkit.getDefaultToolkit().getImage("res/global/icons/error.jpg");
    		dStr = " --- ";
    	}
	    
    	//ImageIcon ic = new ImageIcon(i);
    	
    	//s[DIRECTION_TABLE_COLUMN_POS] = (ImageIcon) ic;
	    s[DIRECTION_TABLE_COLUMN_POS] = dStr;
    	s[TYPE_TABLE_COLUMN_POS] = type;
    	s[LENGTH_TABLE_COLUMN_POS] = m.getData().length;
    	//StringBuffer sb  = new StringBuffer();
    	String ss =  new String(m.getData());
    	s[DATA_TABLE_COLUMN_POS] = ss;
    	
    	DefaultTableModel tb = (DefaultTableModel)jTable1.getModel();
    	
    	tb.addRow(s);
    	
    	scrollToLast(jTable1);
    	
    	
    }

 
    private void scrollToLast(final JTable table)
    {
    	SwingUtilities.invokeLater(new Runnable()
        {
            
            public void run()
            {
                int lastRow = table.getRowCount() - 1;
                Rectangle rec = table.getCellRect(lastRow, 0, true);
                table.scrollRectToVisible(rec);
            }
            
        });
    }

    
    @SuppressWarnings("serial")
	class MyTableModel extends DefaultTableModel{
        MyTableModel(String[] columnNames, int rowNum){
            super(columnNames, rowNum);
            
            
        }

        @SuppressWarnings("unchecked")
		public Class getColumnClass(int col){
        	return getValueAt(0, col).getClass();
            
        }
        
        public boolean isCellEditable(int row, int col) {

//        	if (col ==  KEY_TABLE_COLUMN_POS) {
//        		return false;
//        	} else {
//        		return true;
//        	}
        	return false;
        }

    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox recipientList;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
    
    
    
}


	