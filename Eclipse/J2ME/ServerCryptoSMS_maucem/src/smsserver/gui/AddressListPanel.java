package smsserver.gui;


import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import org.cryptosms.book.Address;

import smsserver.Engine;

@SuppressWarnings("serial")
public class AddressListPanel extends javax.swing.JPanel implements java.awt.event.ActionListener, TableModelListener {
    
	private final String NAME_TABLE_COLUMN = "Name";
	private final String ADDRESS_TABLE_COLUMN = "Address";
	private final String KEY_TABLE_COLUMN = "Key Received";
	
	private final int NAME_TABLE_COLUMN_POS = 0;
	private final int ADDRESS_TABLE_COLUMN_POS = 1;
	private final int KEY_TABLE_COLUMN_POS = 2;

	private final int COLUMNS = 3;
	private Engine _engine;
    /** Creates new form smsPanel */
    public AddressListPanel(Engine e) {
        _engine = e;
    	initComponents();
    	//_engine.buildList();
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        textName = new javax.swing.JTextField();
        labelTextNumber = new javax.swing.JLabel();
        textNumber = new javax.swing.JTextField();
        addEntryButton = new javax.swing.JButton();
        deleteEntryButton = new javax.swing.JButton();
        editEntryButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(700, 400));
        
        
        String [] header = new String[COLUMNS];
        header[KEY_TABLE_COLUMN_POS] = KEY_TABLE_COLUMN;
        header[ADDRESS_TABLE_COLUMN_POS] = ADDRESS_TABLE_COLUMN;
        header[NAME_TABLE_COLUMN_POS] = NAME_TABLE_COLUMN;

        MyTableModel model = new MyTableModel( header , 0);
        
        jTable1.setModel(model);
        jTable1.setRowHeight(32);
                
            
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }

			
        });            
             
        jTable1.setAutoscrolls(true);
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTable1.getModel().addTableModelListener(this);
        JTableHeader th =  jTable1.getTableHeader();
        th.setReorderingAllowed(false);
        

        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Name");

        labelTextNumber.setText("Phone Number");

        addEntryButton.setText("Add");
        addEntryButton.addActionListener(this);

        deleteEntryButton.setText("Delete");
        deleteEntryButton.addActionListener(this);

        editEntryButton.setText("Edit");
        editEntryButton.addActionListener(this);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(editEntryButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(deleteEntryButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(labelTextNumber))
                        .add(24, 24, 24)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(textName)
                            .add(textNumber, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                        .add(15, 15, 15)
                        .add(addEntryButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(textName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(12, 12, 12)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labelTextNumber)
                    .add(textNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(addEntryButton))
                .add(30, 30, 30)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(deleteEntryButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(editEntryButton))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE))
                .addContainerGap())
        );
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == addEntryButton) {
            AddressListPanel.this.addEntryButtonAction(evt);
        }
        else if (evt.getSource() == deleteEntryButton) {
            AddressListPanel.this.deleteEntryButtonAction(evt);
        }
        else if (evt.getSource() == editEntryButton) {
            AddressListPanel.this.editEntryButtonAction(evt);
        }
    }

    private void jTable1MouseClicked(MouseEvent evt) {
    	//System.out.println("selectedrow");
		
	}
    
    private void addRowToAddressList(String name, String number, boolean hasKey, boolean isKeyValid){
    	Image i= null;
    	
    	if (isKeyValid)
    		i=Toolkit.getDefaultToolkit().getImage("res/global/icons/key.jpg");
    	else if (hasKey)
    		i=Toolkit.getDefaultToolkit().getImage("res/global/icons/challenge.jpg");
    	else
    		i=Toolkit.getDefaultToolkit().getImage("res/global/icons/nokey.jpg");
    	
	    ImageIcon ic = new ImageIcon(i);

    	Object  [] s =  new Object[COLUMNS];
    	s[KEY_TABLE_COLUMN_POS] = (ImageIcon) ic;
    	s[ADDRESS_TABLE_COLUMN_POS] = number;
    	s[NAME_TABLE_COLUMN_POS] = name;
    	
    	DefaultTableModel tb = (DefaultTableModel)jTable1.getModel();
    	
    	tb.addRow(s);
    }
    
    private void editEntryButtonAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEntryButtonAction
    	int r = jTable1.getSelectedRow();
    	if (r != -1 ){
    	String name= (String) jTable1.getValueAt(r, NAME_TABLE_COLUMN_POS);
    	String address= (String) jTable1.getValueAt(r, ADDRESS_TABLE_COLUMN_POS);
    	
    	EditEntryAddressListDialog d = new EditEntryAddressListDialog(this, name, address, r);
		Point p = this.getLocation();
		int y = ((p.y + this.getHeight()) / 2) - (d.getHeight()/2); 
		int x = ((p.x + this.getWidth()) / 2) - (d.getWidth()/2);
		d.setLocation(x,y);
		d.setVisible(true);
    	}
    }
    
    protected void callbackEditEntryDialog(String name, String address, int row){
    	
    	_engine.editEntry(row, name, address);
    	updateTable();
    }
    

    private void deleteEntryButtonAction(java.awt.event.ActionEvent evt) {
    	int r = jTable1.getSelectedRow();
    	if (r!=-1){
    	String name= (String) jTable1.getValueAt(r, NAME_TABLE_COLUMN_POS);
    	String address= (String) jTable1.getValueAt(r, ADDRESS_TABLE_COLUMN_POS);
    	String str = "Would you delete the selected record: \n\nName: \""+name+"\"\nAddress: \""+address+"\"\n\nProceed??";
    	int result = JOptionPane.showConfirmDialog(this, str, "Delete?", JOptionPane.OK_CANCEL_OPTION);
    	if (result == JOptionPane.OK_OPTION){
    		
    		_engine.deleteEntry(r);
        	updateTable();
        	
    		
    		//((DefaultTableModel)jTable1.getModel()).removeRow(r);
    	} else if (result == JOptionPane.CANCEL_OPTION){
    		//System.out.println("do nothing");
    	}
    	}
    }

    private void addEntryButtonAction(java.awt.event.ActionEvent evt) {
    	boolean proceed = true;
    	
    	String str = "";
    	
    	String name;
    	if (textName.getText().compareTo("") == 0){
    		proceed = false;
    		str = "The name field can't be blank.\n";
    	} else {
    		name = textName.getText();
    		// Formato internazionale con almeno 7 cifre numeriche
    		if (name.length()<2){
    			proceed = false;
    			str = "Name must be at least 2 characters.\n";
    		}
    	}
    	String number;
    	if ( (textNumber.getText()).compareTo("") == 0){
    		proceed = false;
    		if (str.compareTo("")==0){
    			str += "The number field can't be blank.\n";
    		} else {
    			str = "The name and the number fields can't be blank.\n";
    		}
    	} else {
    		number = textNumber.getText();
    		// Formato internazionale con almeno 7 cifre numeriche
    		if (!number.matches("\\x2B\\d{7,}")){
    			proceed = false;
    			str += "The phone number must be in the \n international format: +393331234567";
    		}
    	}
    	if (!proceed){
    		
    		JOptionPane.showMessageDialog(this, str, "SMS Server", JOptionPane.INFORMATION_MESSAGE);
    		return;
    	}
    	
    	_engine.addEntry(textName.getText(), textNumber.getText());
    	
    	updateTable();
    	textNumber.setText("");
    	textName.setText("");
    }
    
    @SuppressWarnings("unchecked")
	public  void updateTable(){
    	Vector addresses = _engine.buildList();
    	// clear the table
    	DefaultTableModel tb = (DefaultTableModel)jTable1.getModel();
    	tb.setRowCount(0);
    	
    	// Upgrade the table (insert the rmsID???
    	for (Iterator iterator = addresses.iterator(); iterator.hasNext();) {
			Address a = (Address) iterator.next();
			addRowToAddressList(a.getPerson().getName(), a.getUrl(),a.hasKey(), a.isKeyIsValid());
    	}
    	
    	
    	
    }
    
  
    	
    
    @SuppressWarnings("serial")
	class MyTableModel extends DefaultTableModel{
        MyTableModel(String[] columnNames, int rowNum){
            super(columnNames, rowNum);
            
        }

        @SuppressWarnings("unchecked")
		public Class getColumnClass(int col){
        	return getValueAt(0, col).getClass();
            
        }
        
        public boolean isCellEditable(int row, int col) {

//        	if (col ==  KEY_TABLE_COLUMN_POS) {
//        		return false;
//        	} else {
//        		return true;
//        	}
        	return false;
        }

    }
    
    public void tableChanged(TableModelEvent e) {
		//System.out.println("Table changed");
		
	}
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEntryButton;
    private javax.swing.JButton deleteEntryButton;
    private javax.swing.JButton editEntryButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField textNumber;
    private javax.swing.JTextField textName;
    private javax.swing.JLabel labelTextNumber;
    // End of variables declaration//GEN-END:variables

	
    
}

