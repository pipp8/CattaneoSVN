/* soapWebApiSoapBindingObject.h
   Generated by gSOAP 2.8.2 from WebApi.h
   Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#ifndef soapWebApiSoapBindingObject_H
#define soapWebApiSoapBindingObject_H
#include "soapH.h"

/******************************************************************************\
 *                                                                            *
 * Service Object                                                             *
 *                                                                            *
\******************************************************************************/

class WebApiSoapBindingService : public soap
{    public:
	WebApiSoapBindingService()
	{ static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://webapi.wfca.infocert.it", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};

	this->namespaces = namespaces; };
	virtual ~WebApiSoapBindingService() { };
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog) { return soap_bind(this, host, port, backlog); };
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept() { return soap_accept(this); };
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve() { return soap_serve(this); };
};

/******************************************************************************\
 *                                                                            *
 * Service Operations (you should define these globally)                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 __ns1__getToken(struct soap*, _ns1__getToken *ns1__getToken, _ns1__getTokenResponse *ns1__getTokenResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__login(struct soap*, _ns1__login *ns1__login, _ns1__loginResponse *ns1__loginResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__attivaProcedimento(struct soap*, _ns1__attivaProcedimento *ns1__attivaProcedimento, _ns1__attivaProcedimentoResponse *ns1__attivaProcedimentoResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__attivaProcedimentoWide(struct soap*, _ns1__attivaProcedimentoWide *ns1__attivaProcedimentoWide, _ns1__attivaProcedimentoWideResponse *ns1__attivaProcedimentoWideResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__aggiungiDocumentoAlProcedimento(struct soap*, _ns1__aggiungiDocumentoAlProcedimento *ns1__aggiungiDocumentoAlProcedimento, _ns1__aggiungiDocumentoAlProcedimentoResponse *ns1__aggiungiDocumentoAlProcedimentoResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getProcedimento(struct soap*, _ns1__getProcedimento *ns1__getProcedimento, _ns1__getProcedimentoResponse *ns1__getProcedimentoResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__avanzaProcedimento(struct soap*, _ns1__avanzaProcedimento *ns1__avanzaProcedimento, _ns1__avanzaProcedimentoResponse *ns1__avanzaProcedimentoResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getFlussi(struct soap*, _ns1__getFlussi *ns1__getFlussi, _ns1__getFlussiResponse *ns1__getFlussiResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getGiustificativi(struct soap*, _ns1__getGiustificativi *ns1__getGiustificativi, _ns1__getGiustificativiResponse *ns1__getGiustificativiResponse);

#endif
