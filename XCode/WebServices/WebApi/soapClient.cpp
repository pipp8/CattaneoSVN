/*
 $Author: cattaneo $
 $Date: 2011-05-14 18:37:51 +0200(Sab, 14 Mag 2011) $
 $Revision: 11 $
 */


/* soapClient.cpp
   Generated by gSOAP 2.8.2 from WebApi.h
   Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.2 2011-04-26 11:09:48 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getToken(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getToken *ns1__getToken, _ns1__getTokenResponse *ns1__getTokenResponse)
{	struct __ns1__getToken soap_tmp___ns1__getToken;
	if (!soap_endpoint)
		soap_endpoint = "http://www.legalcyclecl.infocert.it/wfca/services/WebApi";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getToken.ns1__getToken = ns1__getToken;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getToken(soap, &soap_tmp___ns1__getToken);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getToken(soap, &soap_tmp___ns1__getToken, "-ns1:getToken", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getToken(soap, &soap_tmp___ns1__getToken, "-ns1:getToken", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getTokenResponse)
		return soap_closesock(soap);
	ns1__getTokenResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getTokenResponse->soap_get(soap, "ns1:getTokenResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__login(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__login *ns1__login, _ns1__loginResponse *ns1__loginResponse)
{	struct __ns1__login soap_tmp___ns1__login;
	if (!soap_endpoint)
		soap_endpoint = "http://www.legalcyclecl.infocert.it/wfca/services/WebApi";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__login.ns1__login = ns1__login;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__login(soap, &soap_tmp___ns1__login);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__login(soap, &soap_tmp___ns1__login, "-ns1:login", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__login(soap, &soap_tmp___ns1__login, "-ns1:login", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__loginResponse)
		return soap_closesock(soap);
	ns1__loginResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__loginResponse->soap_get(soap, "ns1:loginResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__attivaProcedimento(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__attivaProcedimento *ns1__attivaProcedimento, _ns1__attivaProcedimentoResponse *ns1__attivaProcedimentoResponse)
{	struct __ns1__attivaProcedimento soap_tmp___ns1__attivaProcedimento;
	if (!soap_endpoint)
		soap_endpoint = "http://www.legalcyclecl.infocert.it/wfca/services/WebApi";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__attivaProcedimento.ns1__attivaProcedimento = ns1__attivaProcedimento;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__attivaProcedimento(soap, &soap_tmp___ns1__attivaProcedimento);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__attivaProcedimento(soap, &soap_tmp___ns1__attivaProcedimento, "-ns1:attivaProcedimento", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__attivaProcedimento(soap, &soap_tmp___ns1__attivaProcedimento, "-ns1:attivaProcedimento", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__attivaProcedimentoResponse)
		return soap_closesock(soap);
	ns1__attivaProcedimentoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__attivaProcedimentoResponse->soap_get(soap, "ns1:attivaProcedimentoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__attivaProcedimentoWide(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__attivaProcedimentoWide *ns1__attivaProcedimentoWide, _ns1__attivaProcedimentoWideResponse *ns1__attivaProcedimentoWideResponse)
{	struct __ns1__attivaProcedimentoWide soap_tmp___ns1__attivaProcedimentoWide;
	if (!soap_endpoint)
		soap_endpoint = "http://www.legalcyclecl.infocert.it/wfca/services/WebApi";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__attivaProcedimentoWide.ns1__attivaProcedimentoWide = ns1__attivaProcedimentoWide;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__attivaProcedimentoWide(soap, &soap_tmp___ns1__attivaProcedimentoWide);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__attivaProcedimentoWide(soap, &soap_tmp___ns1__attivaProcedimentoWide, "-ns1:attivaProcedimentoWide", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__attivaProcedimentoWide(soap, &soap_tmp___ns1__attivaProcedimentoWide, "-ns1:attivaProcedimentoWide", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__attivaProcedimentoWideResponse)
		return soap_closesock(soap);
	ns1__attivaProcedimentoWideResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__attivaProcedimentoWideResponse->soap_get(soap, "ns1:attivaProcedimentoWideResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__aggiungiDocumentoAlProcedimento(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__aggiungiDocumentoAlProcedimento *ns1__aggiungiDocumentoAlProcedimento, _ns1__aggiungiDocumentoAlProcedimentoResponse *ns1__aggiungiDocumentoAlProcedimentoResponse)
{	struct __ns1__aggiungiDocumentoAlProcedimento soap_tmp___ns1__aggiungiDocumentoAlProcedimento;
	if (!soap_endpoint)
		soap_endpoint = "http://www.legalcyclecl.infocert.it/wfca/services/WebApi";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__aggiungiDocumentoAlProcedimento.ns1__aggiungiDocumentoAlProcedimento = ns1__aggiungiDocumentoAlProcedimento;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__aggiungiDocumentoAlProcedimento(soap, &soap_tmp___ns1__aggiungiDocumentoAlProcedimento);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__aggiungiDocumentoAlProcedimento(soap, &soap_tmp___ns1__aggiungiDocumentoAlProcedimento, "-ns1:aggiungiDocumentoAlProcedimento", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__aggiungiDocumentoAlProcedimento(soap, &soap_tmp___ns1__aggiungiDocumentoAlProcedimento, "-ns1:aggiungiDocumentoAlProcedimento", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__aggiungiDocumentoAlProcedimentoResponse)
		return soap_closesock(soap);
	ns1__aggiungiDocumentoAlProcedimentoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__aggiungiDocumentoAlProcedimentoResponse->soap_get(soap, "ns1:aggiungiDocumentoAlProcedimentoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getProcedimento(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getProcedimento *ns1__getProcedimento, _ns1__getProcedimentoResponse *ns1__getProcedimentoResponse)
{	struct __ns1__getProcedimento soap_tmp___ns1__getProcedimento;
	if (!soap_endpoint)
		soap_endpoint = "http://www.legalcyclecl.infocert.it/wfca/services/WebApi";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getProcedimento.ns1__getProcedimento = ns1__getProcedimento;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getProcedimento(soap, &soap_tmp___ns1__getProcedimento);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getProcedimento(soap, &soap_tmp___ns1__getProcedimento, "-ns1:getProcedimento", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getProcedimento(soap, &soap_tmp___ns1__getProcedimento, "-ns1:getProcedimento", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getProcedimentoResponse)
		return soap_closesock(soap);
	ns1__getProcedimentoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getProcedimentoResponse->soap_get(soap, "ns1:getProcedimentoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__avanzaProcedimento(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__avanzaProcedimento *ns1__avanzaProcedimento, _ns1__avanzaProcedimentoResponse *ns1__avanzaProcedimentoResponse)
{	struct __ns1__avanzaProcedimento soap_tmp___ns1__avanzaProcedimento;
	if (!soap_endpoint)
		soap_endpoint = "http://www.legalcyclecl.infocert.it/wfca/services/WebApi";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__avanzaProcedimento.ns1__avanzaProcedimento = ns1__avanzaProcedimento;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__avanzaProcedimento(soap, &soap_tmp___ns1__avanzaProcedimento);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__avanzaProcedimento(soap, &soap_tmp___ns1__avanzaProcedimento, "-ns1:avanzaProcedimento", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__avanzaProcedimento(soap, &soap_tmp___ns1__avanzaProcedimento, "-ns1:avanzaProcedimento", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__avanzaProcedimentoResponse)
		return soap_closesock(soap);
	ns1__avanzaProcedimentoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__avanzaProcedimentoResponse->soap_get(soap, "ns1:avanzaProcedimentoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getFlussi(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getFlussi *ns1__getFlussi, _ns1__getFlussiResponse *ns1__getFlussiResponse)
{	struct __ns1__getFlussi soap_tmp___ns1__getFlussi;
	if (!soap_endpoint)
		soap_endpoint = "http://www.legalcyclecl.infocert.it/wfca/services/WebApi";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getFlussi.ns1__getFlussi = ns1__getFlussi;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getFlussi(soap, &soap_tmp___ns1__getFlussi);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getFlussi(soap, &soap_tmp___ns1__getFlussi, "-ns1:getFlussi", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getFlussi(soap, &soap_tmp___ns1__getFlussi, "-ns1:getFlussi", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getFlussiResponse)
		return soap_closesock(soap);
	ns1__getFlussiResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getFlussiResponse->soap_get(soap, "ns1:getFlussiResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getGiustificativi(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getGiustificativi *ns1__getGiustificativi, _ns1__getGiustificativiResponse *ns1__getGiustificativiResponse)
{	struct __ns1__getGiustificativi soap_tmp___ns1__getGiustificativi;
	if (!soap_endpoint)
		soap_endpoint = "http://www.legalcyclecl.infocert.it/wfca/services/WebApi";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getGiustificativi.ns1__getGiustificativi = ns1__getGiustificativi;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getGiustificativi(soap, &soap_tmp___ns1__getGiustificativi);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getGiustificativi(soap, &soap_tmp___ns1__getGiustificativi, "-ns1:getGiustificativi", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getGiustificativi(soap, &soap_tmp___ns1__getGiustificativi, "-ns1:getGiustificativi", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getGiustificativiResponse)
		return soap_closesock(soap);
	ns1__getGiustificativiResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getGiustificativiResponse->soap_get(soap, "ns1:getGiustificativiResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
